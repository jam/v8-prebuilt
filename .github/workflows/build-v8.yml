name: Build V8 Artifact Bundle

on:
  push:
    tags:
      - 'v*'
  
  workflow_dispatch:
    inputs:
      v8_version:
        description: 'V8 version to build (e.g., 14.3.84)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true

jobs:
  prepare:
    name: Clone V8 Source
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine V8 version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.v8_version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Preparing V8 version: $VERSION"
      
      # Cache depot_tools to avoid cloning every time
      - name: Cache depot_tools
        uses: actions/cache@v4
        with:
          path: depot_tools
          key: depot_tools-${{ runner.os }}
      
      - name: Setup depot_tools
        run: |
          if [ ! -d "depot_tools" ]; then
            git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          fi
          echo "$PWD/depot_tools" >> $GITHUB_PATH
      
      - name: Checkout V8 at specific tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üì¶ Fetching V8 version $VERSION..."
          
          mkdir v8_checkout
          cd v8_checkout
          
          # Create .gclient file with specific tag revision
          cat > .gclient << EOF
          solutions = [
            {
              "name": "v8",
              "url": "https://chromium.googlesource.com/v8/v8.git",
              "managed": False,
              "custom_deps": {},
            },
          ]
          EOF
          
          # Sync to the specific tag with shallow clone
          echo "üîÑ Syncing V8 $VERSION and dependencies..."
          gclient sync \
            --revision=refs/tags/$VERSION \
            --no-history \
            --shallow \
            -D \
            --jobs=16
          
          # Verify checkout
          cd v8
          echo "‚úÖ Checked out: $(git describe --tags)"
          cp LICENSE ../V8_LICENSE
      
      - name: Remove unnecessary files
        run: |
          cd v8_checkout/v8
          
          echo "üì¶ Removing unnecessary files..."
          
          # Remove common non-essential directories in one pass
          rm -rf \
            test/ \
            testing/ \
            docs/ \
            samples/ \
            third_party/*/test/ \
            third_party/*/tests/ \
            third_party/*/testdata/ \
            **/*.md \
            **/README* \
            2>/dev/null || true
          
          cd ../..
          echo "‚úÖ Cleanup complete"
          echo "Size: $(du -sh v8_checkout | cut -f1)"
      
      - name: Create source archive
        run: |
          echo "üì¶ Creating source archive..."
          
          # Use pigz for parallel compression if available, otherwise gzip
          if command -v pigz &> /dev/null; then
            tar -cf - v8_checkout | pigz -9 > v8-source.tar.gz
          else
            tar -czf v8-source.tar.gz v8_checkout
          fi
          
          SIZE=$(du -h v8-source.tar.gz | cut -f1)
          echo "üìä Archive size: $SIZE"
      
      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: v8-source-${{ steps.version.outputs.version }}
          path: |
            v8-source.tar.gz
            v8_checkout/V8_LICENSE
          retention-days: 1
          compression-level: 0  # Already compressed

  build:
    name: Build V8 - ${{ matrix.config.name }}
    needs: prepare
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 120
    
    strategy:
        matrix:
            config:
              - name: Linux x86_64
                os: ubuntu-latest
                triple: x86_64-unknown-linux-gnu
                platform: x64
                
              - name: macOS x86_64
                os: macos-13
                triple: x86_64-apple-macosx
                platform: x64
                
              - name: macOS ARM64
                os: macos-latest
                triple: arm64-apple-macosx
                platform: arm64
    
    steps:
      - name: Determine V8 version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.v8_version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3 \
            python3-pip \
            pkg-config \
            git \
            curl \
            lsb-release \
            ninja-build \
            build-essential \
            libglib2.0-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install python git ninja

      - name: Cache depot_tools
        uses: actions/cache@v4
        with:
          path: depot_tools
          key: depot_tools-${{ runner.os }}

      - name: Setup depot_tools
        run: |
          if [ ! -d "depot_tools" ]; then
            git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          fi
          echo "$PWD/depot_tools" >> $GITHUB_PATH

      - name: Download V8 source
        uses: actions/download-artifact@v4
        with:
          name: v8-source-${{ steps.version.outputs.version }}

      - name: Extract V8 source
        run: |
          echo "üì¶ Extracting V8 source..."
          tar -xzf v8-source.tar.gz
          echo "‚úÖ Source extracted"

      - name: Sync V8 dependencies
        run: |
          cd v8_checkout/v8
          gclient sync

      - name: Install V8 build dependencies
        if: runner.os == 'Linux'
        run: |
            cd v8_checkout/v8
            echo "Installing V8 build dependencies..."
            # Use --no-arm --no-chromeos-fonts to avoid unnecessary deps
            sudo ./build/install-build-deps.sh --no-prompt --no-chromeos-fonts
        
      - name: Configure V8 build
        run: |
            cd v8_checkout/v8
            
            # Generate initial config
            python3 tools/dev/v8gen.py -vv ${{ matrix.config.platform }}.release
            
            # Append custom configuration
            cat >> out.gn/${{ matrix.config.platform }}.release/args.gn << 'EOF'
            v8_monolithic = true
            v8_use_external_startup_data = false
            is_component_build = false
            v8_enable_i18n_support = false
            v8_enable_webassembly = true
            is_debug = false
            symbol_level = 0
            v8_enable_pointer_compression = false
            v8_static_library = true
            EOF
            
            # Platform-specific configuration
            if [ "${{ runner.os }}" = "Linux" ]; then
            cat >> out.gn/${{ matrix.config.platform }}.release/args.gn << 'EOF'
            use_custom_libcxx = false
            use_sysroot = false
            treat_warnings_as_errors = false
            EOF
            else
            # macOS
            cat >> out.gn/${{ matrix.config.platform }}.release/args.gn << 'EOF'
            is_clang = true
            use_custom_libcxx = false
            treat_warnings_as_errors = false
            EOF
            fi
            
            echo "üìù Build configuration:"
            cat out.gn/${{ matrix.config.platform }}.release/args.gn
            
            # CRITICAL: Regenerate build files with gn
            echo "üîÑ Generating build files..."
            gn gen out.gn/${{ matrix.config.platform }}.release
        
      - name: Build V8
        run: |
            cd v8_checkout/v8
            
            echo "üî® Building V8 (this will take 30-60 minutes)..."
            ninja -C out.gn/${{ matrix.config.platform }}.release -j $(nproc 2>/dev/null || sysctl -n hw.ncpu) v8_monolith
            
            echo "‚úÖ Build complete!"
            echo "Build output:"
            find out.gn/${{ matrix.config.platform }}.release/obj -name "*.a" -type f
        
      - name: Prepare artifact
        run: |
            TRIPLE="${{ matrix.config.triple }}"
            PLATFORM="${{ matrix.config.platform }}"
            
            echo "üì¶ Packaging artifact for $TRIPLE..."
            
            mkdir -p output/$TRIPLE/lib
            mkdir -p output/$TRIPLE/include
            
            # Find the actual libv8_monolith.a location (it might be in a subdirectory)
            LIBV8_PATH=$(find v8_checkout/v8/out.gn/$PLATFORM.release/obj -name "libv8_monolith.a" -type f | head -n 1)
            
            if [ -n "$LIBV8_PATH" ] && [ -f "$LIBV8_PATH" ]; then
            echo "Found libv8_monolith.a at: $LIBV8_PATH"
            cp "$LIBV8_PATH" output/$TRIPLE/lib/
            else
            echo "‚ùå Error: libv8_monolith.a not found!"
            echo "Contents of out.gn/$PLATFORM.release/obj:"
            find v8_checkout/v8/out.gn/$PLATFORM.release/obj -type f -name "*.a"
            exit 1
            fi
            
            # Copy headers
            cp -r v8_checkout/v8/include/* output/$TRIPLE/include/
            
            # Copy license
            cp V8_LICENSE output/$TRIPLE/LICENSE
            
            echo "‚úÖ Artifact contents:"
            ls -lh output/$TRIPLE/lib/
            echo "Library size: $(du -h output/$TRIPLE/lib/libv8_monolith.a | cut -f1)"
        
      - name: Upload platform artifact
        uses: actions/upload-artifact@v4
        with:
            name: v8-${{ matrix.config.triple }}
            path: output/${{ matrix.config.triple }}
            retention-days: 1
            if-no-files-found: error

  create-bundle:
    name: Create Artifact Bundle
    needs: build
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Determine V8 version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.v8_version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "V8 version: $VERSION"
      
      - name: Download all platform artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create artifact bundle
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üì¶ Creating artifact bundle for V8 $VERSION..."
          
          mkdir -p V8Binary.artifactbundle
          
          mv artifacts/v8-x86_64-unknown-linux-gnu \
             V8Binary.artifactbundle/x86_64-unknown-linux-gnu
          
          mv artifacts/v8-x86_64-apple-macosx \
             V8Binary.artifactbundle/x86_64-apple-macosx
          
          mv artifacts/v8-arm64-apple-macosx \
             V8Binary.artifactbundle/arm64-apple-macosx
          
          cat > V8Binary.artifactbundle/info.json << EOF
          {
            "schemaVersion": "1.0",
            "artifacts": {
              "v8": {
                "type": "library",
                "version": "$VERSION",
                "variants": [
                  {
                    "path": "x86_64-unknown-linux-gnu/lib/libv8_monolith.a",
                    "supportedTriples": ["x86_64-unknown-linux-gnu"]
                  },
                  {
                    "path": "x86_64-apple-macosx/lib/libv8_monolith.a",
                    "supportedTriples": ["x86_64-apple-macosx"]
                  },
                  {
                    "path": "arm64-apple-macosx/lib/libv8_monolith.a",
                    "supportedTriples": ["arm64-apple-macosx"]
                  }
                ]
              }
            }
          }
          EOF
          
          echo "‚úÖ Artifact bundle structure:"
          tree V8Binary.artifactbundle || find V8Binary.artifactbundle -type f
      
      - name: Copy V8 license
        run: |
          cp artifacts/v8-x86_64-unknown-linux-gnu/LICENSE \
             V8Binary.artifactbundle/LICENSE
      
      - name: Create bundle archive
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üóúÔ∏è Compressing artifact bundle..."
          zip -r V8Binary.artifactbundle.zip V8Binary.artifactbundle
          
          SIZE=$(du -h V8Binary.artifactbundle.zip | cut -f1)
          echo "Bundle size: $SIZE"
      
      - name: Compute checksum
        id: checksum
        run: |
          echo "üîê Computing checksum..."
          CHECKSUM=$(shasum -a 256 V8Binary.artifactbundle.zip | awk '{print $1}')
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Checksum: $CHECKSUM"
          echo "$CHECKSUM" > checksum.txt
      
      - name: Generate Package.swift snippet
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CHECKSUM="${{ steps.checksum.outputs.checksum }}"
          
          cat > USAGE.md << EOF
          # Using V8 $VERSION in Swift Package Manager
          
          Add this to your \`Package.swift\`:
          
          \`\`\`swift
          .binaryTarget(
              name: "V8Binary",
              url: "https://github.com/${{ github.repository }}/releases/download/v$VERSION/V8Binary.artifactbundle.zip",
              checksum: "$CHECKSUM"
          )
          \`\`\`
          
          ## Platforms
          
          - Linux (x86_64)
          - macOS (x86_64, arm64)
          
          ## License
          
          V8 is licensed under the BSD 3-Clause License.
          EOF
          
          cat USAGE.md
      
      - name: Create GitHub Release
        if: |
          github.event_name == 'push' || 
          (github.event_name == 'workflow_dispatch' && 
           github.event.inputs.create_release == 'true')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: V8 v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            V8Binary.artifactbundle.zip
            checksum.txt
            USAGE.md
          body: |
            # V8 Artifact Bundle v${{ steps.version.outputs.version }}
            
            Pre-built V8 JavaScript engine binaries for Swift Package Manager.
            
            ## üì¶ Platforms
            
            - ‚úÖ Linux x86_64
            - ‚úÖ macOS x86_64 (Intel)
            - ‚úÖ macOS arm64 (Apple Silicon)
            
            ## üîê Checksum
            ```
            ${{ steps.checksum.outputs.checksum }}
            ```
            
            ## üöÄ Usage
            ```swift
            .binaryTarget(
                name: "V8Binary",
                url: "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/V8Binary.artifactbundle.zip",
                checksum: "${{ steps.checksum.outputs.checksum }}"
            )
            ```
            
            See [USAGE.md](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/USAGE.md) for complete integration instructions.
            
            ## üìÑ License
            
            V8 is licensed under the BSD 3-Clause License. See the LICENSE file included in the artifact bundle.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "## V8 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Checksum:** \`${{ steps.checksum.outputs.checksum }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Download" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[V8Binary.artifactbundle.zip](https://github.com/${{ github.repository }}/releases/download/v$VERSION/V8Binary.artifactbundle.zip)" >> $GITHUB_STEP_SUMMARY
          
